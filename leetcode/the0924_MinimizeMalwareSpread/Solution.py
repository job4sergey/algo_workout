from collections import defaultdict


class Solution(object):
    def minMalwareSpread(self, MX, init):
        N = len(MX)
        init.sort()

        ufos = [self.Set() for _ in range(N)]

        for u in range(N):
            for v in range(u + 1, N):
                if u == v:
                    continue

                if MX[u][v]:
                    self.Set.union(ufos[u], ufos[v])

        cnts = defaultdict(int)

        for u in init:
            cnts[ufos[u].find()] += 1

        mx = 0
        best = init[0]
        for u in init:
            leader = ufos[u].find()
            if cnts[leader] == 1 and leader.sz > mx:
                mx = leader.sz
                best = u

        return best

    class Set:
        def __init__(self):
            self.parent = self
            self.sz = 1

        def find(self):
            if self.parent != self:
                self.parent = self.parent.find()

            return self.parent

        @staticmethod
        def union(a, b):
            a = a.find()
            b = b.find()

            if a == b:
                return False

            if a.sz > b.sz:
                b.parent = a
                a.sz += b.sz
            else:
                a.parent = b
                b.sz += a.sz

            return True
