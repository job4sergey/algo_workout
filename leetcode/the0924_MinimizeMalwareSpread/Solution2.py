from collections import defaultdict


class Solution(object):
    def minMalwareSpread(self, MX, init):
        N = len(MX)
        init.sort()

        ufo = self.UFO(N)

        for u in range(N):
            for v in range(u + 1, N):
                if u == v:
                    continue

                if MX[u][v]:
                    ufo.union(u, v)

        cnts = defaultdict(int)

        for u in init:
            cnts[ufo.par(u)] += 1

        mx = 0
        best = init[0]
        for u in init:
            leader = ufo.par(u)
            if cnts[leader] == 1 and ufo.sz[leader] > mx:
                mx = ufo.sz[leader]
                best = u

        return best

    class UFO:
        def __init__(self, sz):
            self.id = [i for i in range(sz)]
            self.sz = [1] * sz
            self.count = sz

        def par(self, i):
            idd = self.id
            while idd[i] != i:
                par = idd[idd[i]]
                idd[i] = par
                i = idd[i]

            return idd[i]

        def is_connected(self, p, q):
            return self.par(p) == self.par(q)

        def union(self, p, q):
            sz = self.sz
            idd = self.id

            pp = self.par(p)
            pq = self.par(q)

            if pp != pq:
                if sz[pp] > sz[pq]:
                    sz[pp] += sz[pq]
                    idd[pq] = pp
                else:
                    sz[pq] += sz[pp]
                    idd[pp] = pq

                self.count -= 1

        def connected_comp_size(self):
            return self.count
